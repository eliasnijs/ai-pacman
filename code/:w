import numpy as np

import gym
from gym import spaces

from pacman.pacman import *

"""
Pacman Ai - The Environment - v1

This environment does not support eating ghosts. The challenge
here is to learn to eat pellets to increase and to not get killed
by the ghosts.

The observation space:
- pacman.x, pacman.y, pacman.dx, pacman.dy
- for ghost in all ghosts: delta_ghost.x, delta_ghost.y, ghost.dx, ghost.dy
- pellet positions
- previous actions (last 30)
"""

PACMAN_MOV_MEM_AMOUNT = 64

class PacmanEnvironment_v1(gym.Env):
    metadata = {'render.modes': ['human']}

    def __init__(self, screen=None, map="pacman/maps/map.txt"):
        super(PacmanEnvironment_v1, self).__init__();

        self.screen = screen

        game = new_game(self.map)

        2 + len(game.ghosts)*4


        self.action_space = spaces.Discrete(4)
        self.observation_space = spaces.Box()

    def get_observation(self):
        pacman_x = self.game.pacman.x
        pacman_y = self.game.pacman.y

        ghost_data = []
        for ghost in self.game.ghosts:
            ghost_data.append(pacman_x - ghost.body.x)
            ghost_data.append(pacman_y - ghost.body.y)
            ghost_data.append(ghost.body.dir.x)
            ghost_data.append(ghost.body.dir.y)

        pellet_data = []
        for i,row in enumerate(self.game.tiles):
            for j,cell in enumerate(row):
                if cell == 'Â·':
                    pellet_data.append(i)
                    pellet_data.append(j)

        self.previous_actions = deque(maxlen=PACMAN_MOV_MEM_AMOUNT)
        for _ in range(PACMAN_MOV_MEM_AMOUNT):
            self.previous_actions(-1)

        return [pacman_x, pacman_y] + ghost_data  + pellet_data + self.previous_actions

    def step(self, action):
        kb_key(self.game.controller.up,    action == self.TOP)
        kb_key(self.game.controller.left,  action == self.LEFT)
        kb_key(self.game.controller.down,  action == self.BOTTOM)
        kb_key(self.game.controller.right, action == self.RIGHT)

        game.update(self.game)

        self.observation = get_observation(self);
        self.is_done = self.game.pellet_count == 0 or not self.game.running

        self.reward = self.game.score
        if self.is_done and self.game.pellet != 0:
            self.reward = -10

        self.info = {}
        return self.observation, self.reward, self.is_done, self.info

    def reset(self):
        self.game = new_game(self.map)
        self.observation = get_observation(self);
        return self.observation

    def render(self, mode='human'):
        if mode == 'human':
            assert(self.screen != None)
            game_render(self.screen, self.game)
        else:
            raise NotImplementedError()


pacman_env = PacmanEnvironment_v1()
